rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSigned() {
      return request.auth.uid != null;
    }

    function isAuthor(userId) {
      return isSigned() && request.auth.uid == userId;
    }

    function isOwnDeck(deckId) {
      return exists(/databases/$(database)/documents/decks/$(request.auth.uid)/userDecks/$(deckId));
    }

    function isSharedDeck() {
      return exists(/databases/$(database)/documents/deckCollaborators/$(resource.data.deckId)/deckCollaborators/$(request.auth.uid));
    }

    function statsSharedWith(userId) {
      return exists(/databases/$(database)/documents/sharing/$(userId)/sharedStats/stats/grantedTo/$(request.auth.uid));
    }

    function deckSharedWith(deckId, userId) {
        return exists(/databases/$(database)/documents/sharing/$(userId)/sharedDecks/$(deckId)/grantedTo/$(request.auth.uid));
    }

    // Is logged in user collaborator of given userId
    function isCollaborator(userId) {
      return exists(/databases/$(database)/documents/userCollaborators/$(userId)/collaborators/$(request.auth.uid)) ||
      exists(/databases/$(database)/documents/userCollaborators/$(request.auth.uid)/collaborators/$(userId));
    }

    match /userCollaborators/{userId}/collaborators/{grantedToId} {
      allow read: if isSigned() && (request.auth.uid == userId || request.auth.uid == grantedToId);
      allow write: if isSigned() && request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read, write: if isSigned() 
                            && (isAuthor(userId) || statsSharedWith(userId)) || isCollaborator(userId);
      allow create: if request.auth.uid != null && request.auth.uid == userId;
    }
    
    // Email-to-uid mapping collection
    match /emailToUid/{hashedEmail} {
      // Allow read (get) only if authenticated
      allow get: if isSigned();

      // Only allow Cloud Functions to write to this collection
      allow create, update, delete: if isCloudFunction() 
                                   || (request.auth.uid != null && request.auth.uid == request.resource.data.uid);
    }

//    match /sharing/{userId}/{resources=**} {
//        allow read: if isSigned(); // && (request.auth.uid == userId || resource.data.grantedTo == request.auth.uid);
//        allow write: if isSigned() && request.auth.uid == userId;
//    }

    match /sharing/{userId}/sharedDecks/{deckId}/grantedTo/{grantedToUid} {
      allow read: if isSigned(); // && (isAuthor(userId) || resource.data.grantedTo == request.auth.uid);
      allow write: if request.auth.uid == userId;
    }

    match /sharing/{userId}/sharedStats/stats/grantedTo/{grantedToUid} {
      allow read: if isSigned(); // && (isAuthor(userId) || resource.data.grantedTo == request.auth.uid);
      allow write: if request.auth.uid == userId;
    }

    match /{path=**}/grantedTo/{grantedToUid} {
      allow read: if isSigned(); // && (isAuthor(userId) || resource.data.grantedTo == request.auth.uid);
      allow write: if request.auth.uid == userId;
    }

    // `collaborators` collection connect users. Records can be created by any user but the creating user's ID needs to
    // reflected in `initiatorUserId` field. User can modify the record either when their ID is `initiatorUserId` or
    // `receivingUserId`. The same rule applies to querying - user ID needs to be in either `initiatorUserId` or 
    // `receivingUserId` fields.
    match /userCollaborators/{userId} {
      allow write: if isSigned() && request.auth.uid == userId;
      allow read: if isSigned() && request.auth.uid == userId;
    }

    match /cards/{userId}/userCards/{cardId=**} {
        allow read: if isSigned() && (resource == null || isAuthor(userId));
        allow write: if isAuthor(userId);
    }

    match /{path=**}/userCards/{cardId} {
      allow read: if isSigned();
    }

    match /decks/{userId}/userDecks/{deckId} {
      allow read, write: if isAuthor(userId) || deckSharedWith(deckId, userId);
      allow create: if isAuthor(userId);
    }

    match /provisionaryCards/{userId}/userProvisionaryCards/{cardId} {
      allow read, write: if isAuthor(userId);
    }

    match /{path=**}/userDecks/{deckId} {
      allow read: if isSigned(); // && (isAuthor(userId) || deckSharedWith(deckId, userId));
    }

    match /deckGroups/{userId}/userDeckGroups/{deckGroupId=**} {
      allow read: if isAuthor(userId);
      allow write: if isAuthor(userId);
      allow create: if isAuthor(userId);
    }

    match /reviewLog/{userId}/userReviewLog/{logId=**} {
      allow read: if (isAuthor(userId) || statsSharedWith(userId));
      allow write: if isAuthor(userId);
    }

    match /cardStats/{userId}/userCardStats/{cardStatId=**} {
      allow read: if (resource == null || isAuthor(userId)
                             || statsSharedWith(userId));
      allow write: if isAuthor(userId);
      allow create: if isAuthor(userId);
    }

  }
}