rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read, write: if request.auth.uid != null && request.auth.uid == userId;
      allow create: if request.auth.uid != null && request.auth.uid == userId;

      match /collaborators/{collaboratorId} {
        allow read: if request.auth.uid != null 
                      && (request.auth.uid == userId || request.auth.uid == collaboratorId);
        allow write: if request.auth.uid != null && request.auth.uid == userId;
      }
    }
    
    // Email-to-uid mapping collection
    match /emailToUid/{hashedEmail} {
      // Allow read (get) only if authenticated
      allow get: if request.auth != null;

      // Only allow Cloud Functions to write to this collection
      allow create, update, delete: if isCloudFunction() 
                                   || (request.auth.uid != null && request.auth.uid == request.resource.data.uid);
    }

    // `collaborators` collection connect users. Records can be created by any user but the creating user's ID needs to
    // reflected in `initiatorUserId` field. User can modify the record either when their ID is `initiatorUserId` or
    // `receivingUserId`. The same rule applies to querying - user ID needs to be in either `initiatorUserId` or 
    // `receivingUserId` fields.
    match /collaborators/{invitation} {
      allow create: if request.auth.uid != null 
                       && request.resource.data.initiatorUserId == request.auth.uid;
      allow delete: if request.auth.uid != null 
                    && resource.data.initiatorUserId == request.auth.uid;
      allow update: if request.auth.uid != null
                    && (request.auth.uid == resource.data.initiatorUserId || request.auth.token.email == resource.data.receivingUserEmail)
                    && (request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['receivingUserId', 'status', 'lastChangeTimestamp']));
      allow read: if request.auth.uid != null
                  && (resource.data.initiatorUserId == request.auth.uid 
                      || resource.data.receivingUserId == request.auth.uid
                      || resource.data.receivingUserEmail == request.auth.token.email);
    }

    match /cards/{card} {
      allow read, write: if request.auth.uid != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid != null;
    }

    match /decks/{deck} {
      allow read, write: if request.auth.uid != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid != null;
    }

    match /cardAnswers/{cardAnswer} {
      allow read: if request.auth.uid != null
                         && (request.auth.uid == resource.data.userId
                             || (
                             	exists(/databases/$(database)/documents/users/$(resource.data.userId)/collaborators/$(request.auth.token.email))
                             	&& get(/databases/$(database)/documents/users/$(resource.data.userId)/collaborators/$(request.auth.token.email)).data.stats == true)
                             );
      allow write: if request.auth.uid != null && (request.auth.uid == resource.data.userId);
      allow create: if request.auth.uid != null;
    }

    match /cardStats/{cardStat} {
      allow read: if request.auth.uid != null
                         && (request.auth.uid == resource.data.userId
                             || (
                             	exists(/databases/$(database)/documents/users/$(resource.data.userId)/collaborators/$(request.auth.token.email))
                             	&& get(/databases/$(database)/documents/users/$(resource.data.userId)/collaborators/$(request.auth.token.email)).data.stats == true)
                             );
      allow write: if request.auth.uid != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid != null;
    }

    match /reviewLog/{reviewLog} {
      allow read: if request.auth.uid != null
                         && (request.auth.uid == resource.data.userId
                             || get(/databases/$(database)/documents/users/$(resource.data.userId)/collaborators/$(request.auth.uid)).data.stats == true);
      allow write: if request.auth.uid != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid != null;
    }

  }
}
